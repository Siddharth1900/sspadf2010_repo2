{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sspadf2010"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"ls_1101_azsqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_1101_azsqldb'"
		},
		"ls_AzureSqlDb_alterrow_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDb_alterrow'"
		},
		"ls_adlsgen2410_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2410'"
		},
		"ls_adlsgen2_2510_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_2510'"
		},
		"ls_adlsgen2410_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sspadls2410.dfs.core.windows.net/"
		},
		"ls_adlsgen2_2510_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sspadls2510.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than  3 minutes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 3 minutes ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_adlsgen2410",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{addMinutes(pipeline().TriggerTime, -3)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "sourcefolder"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "subfolder"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "loggingfolder/subfolder"
					}
				},
				"annotations": [
					"PL Template"
				],
				"lastPublishTime": "2023-10-28T18:28:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDatasetForDeleteActivity')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScriptActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_1101_azsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select * from [dbo].[emptbl]\n\nselect * from [dbo].[city_tbl]\n\nselect * from [dbo].[countries]\n\nPRINT 'All 4 Queries Executed'"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00",
							"logSettings": {
								"logDestination": "ExternalStore",
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "loginfo"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-11T14:11:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScriptActivity_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_1101_azsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "cityname",
											"type": "String",
											"value": "BLR",
											"direction": "Input"
										},
										{
											"name": "salvalue",
											"type": "Int64",
											"value": "1500",
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "select * from [dbo].[emp_db] where City=@cityname and Salary>@salvalue"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00",
							"logSettings": {
								"logDestination": "ExternalStore",
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "loginfo"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-11T14:30:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScriptActivity_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_1101_azsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "PRINT 'Create Table '\nCreate table Cust(\ncust_id INT,\ncust_name VARCHAR(50),\ncust_loc varchar(100),\ncust_orgid INT\n)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00",
							"logSettings": {
								"logDestination": "ExternalStore",
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "loginfo"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-11T14:38:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SessionLog_in_CopyActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false,
							"skipErrorFile": {
								"fileMissing": false
							},
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "loginfo"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_binary_blob_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adlsgen2_output3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T16:15:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_binary_blob_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_adlsgen2_output3')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl-GlobalParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_inputbinary3010",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									},
									"Rootpath": {
										"value": "@pipeline().globalParameters.Rootpath_gp",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_outputbinary3010",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					},
					"RootPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-30T15:41:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputbinary3010')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputbinary3010')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_JsonReadingexample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_folderreadingmetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "File_Name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"File_Name": {
						"type": "String"
					}
				},
				"annotations": [
					"Pipeline"
				],
				"lastPublishTime": "2023-10-28T17:58:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_folderreadingmetadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_PowerQuery1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pq1_GroupBy",
								"type": "DataFlowReference",
								"datasetParameters": {
									"ds_inputemp_sample": {},
									"ds_inputdept_sample": {},
									"UserQuerydssinkoutput2csv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQuerydssinkoutput2csv",
											"dataset": {
												"referenceName": "ds_sinkoutput2_csv",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQuerydssinkoutput2csv"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"Power Query"
				],
				"lastPublishTime": "2023-10-28T17:40:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pq1_GroupBy')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_AlterRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AlterRow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AlterRow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CacheSink_to_Activity_Output",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"CacheSinktoactivityOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Sal_Max",
							"value": {
								"value": "@activity('Data flow1').output.runStatus.output.CacheSinktoactivityOutput.value[0].Max_Sal",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Sal_Max": {
						"type": "Integer"
					}
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-05T15:41:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CacheSink_to_Activity_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df2_parametrize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parametrizedataflow",
								"type": "DataFlowReference",
								"parameters": {
									"dep_param": {
										"value": "@pipeline().parameters.Pl_Dept_param",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Pl_Dept_param": {
						"type": "int"
					}
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-10-28T17:40:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parametrizedataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDatasetForDeleteActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your source store to delete files.",
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_1101_azsqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_1101_azsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "empdb"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_1102_AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_1101_azsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "sal",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "loc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp11"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_1102_azsqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_1101_azsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "city_tbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_accountempcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "accountemployees.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adlsgen2_output3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output3"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_alterrow_azuresqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDb_alterrow",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmpName",
						"type": "varchar"
					},
					{
						"name": "DeptID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Salary",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Bonus",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "DOJ",
						"type": "date"
					},
					{
						"name": "Company",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp_db"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDb_alterrow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_assertinputcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emp_Assert.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuresqldb1105')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_1101_azsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "Skills",
						"type": "varchar"
					},
					{
						"name": "emp_address",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emptbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_1101_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_binary_blob_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "cont2"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cast_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp_cast.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_deptassertcsv_Input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dept_Assert.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "DeptName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_empflowletcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emp_Flowlet.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_flattenrow_inputjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Employeejson.json",
						"fileSystem": "input"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"Skills": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Address": {
							"type": "object",
							"properties": {
								"State": {
									"type": "string"
								},
								"Country": {
									"type": "string"
								},
								"Zipcode": {
									"type": "string"
								}
							}
						},
						"Contact": {
							"type": "object",
							"properties": {
								"Phone": {
									"type": "string"
								},
								"Email": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_folderreadingmetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "input"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fuzzyemp1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp1_fz.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fuzzyemp2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp2_fz.csv",
						"fileSystem": "input2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_emp_DriftSchema')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emp_validate_DriftSchema.txt",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_emp_validateSchema')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emp_ValidateSchema.txt",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_excel_dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dept.xlsx",
						"fileSystem": "input"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_input_excel_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emp.xlsx",
						"fileSystem": "input"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputbinary3010')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					},
					"Rootpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Rootpath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputdept_sample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dept_sample.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputemp_sample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp_sample.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_jsoninput_1108')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Employeejson.json",
						"fileSystem": "input"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Emp_details": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"Skills": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"Address": {
										"type": "object",
										"properties": {
											"State": {
												"type": "string"
											},
											"Country": {
												"type": "string"
											},
											"Zipcode": {
												"type": "string"
											}
										}
									},
									"Contact": {
										"type": "object",
										"properties": {
											"Phone": {
												"type": "string"
											},
											"Email": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_jsonoutput3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output3"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_marketingempcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Marketingemployees.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputbinary3010')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output3010container"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_salesempcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "salesemployee.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Bonus",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "DOJ",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkoutput2_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkoutput3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output3"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DeptID",
						"type": "String"
					},
					{
						"name": "DeptName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sinkoutput_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_2510",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_unpivot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2410",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Unpivot_CSV.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PO",
						"type": "String"
					},
					{
						"name": "Vendor",
						"type": "String"
					},
					{
						"name": "Apple",
						"type": "String"
					},
					{
						"name": "Pear",
						"type": "String"
					},
					{
						"name": "Orange",
						"type": "String"
					},
					{
						"name": "Mango",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_1101_azsqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_1101_azsqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDb_alterrow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"azuresqldb_DF"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDb_alterrow_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2410')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"adlsgen2_DF"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2410_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2410_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2_2510')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"adlsgen2_DF"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_2510_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_2510_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"trigger_metadataactivity"
				],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_JsonReadingexample",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-10-29T23:32:00",
						"endTime": "2023-10-30T23:36:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_JsonReadingexample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AlterRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_alterrow_azuresqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp alterRow(insertIf(DeptID==20),",
						"     updateIf(DeptID==30),",
						"     deleteIf(DeptID==50),",
						"     upsertIf(DeptID==40)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          EmpID as integer,",
						"          EmpName as string,",
						"          DeptID as long,",
						"          Salary as long,",
						"          Bonus as long,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as date,",
						"          Company as string",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_alterrow_azuresqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_assertinputcsv",
								"type": "DatasetReference"
							},
							"name": "empsrc"
						},
						{
							"dataset": {
								"referenceName": "ds_deptassertcsv_Input",
								"type": "DatasetReference"
							},
							"name": "Deptsrc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "goodrecords"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "badrecords"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          City as string,",
						"          DOJ as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> empsrc",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> Deptsrc",
						"empsrc, Deptsrc assert(expectTrue(!isNull(toDate(DOJ,'MM/dd/yyyy')), false, 'assert_DOJ', null, 'Checking DOJ Data type Format'),",
						"     expectUnique(EmpID, false, 'assert_empid', null, 'Checking Unique EmpID'),",
						"     expectExists(Deptsrc@DeptID == empsrc@DeptID, false, 'assert_deptExists', null, 'Checking DeptId on Both Tables'),",
						"     expectTrue(!isNull(Bonus), false, 'assert_BonusEmpty', null, 'Checking bonus is null')) ~> assert1",
						"assert1 derive(Is_ErrorRow = isError(),",
						"          Is_IncorrectDeptRow = hasError('assert_deptExists'),",
						"          asserterrormessage = assertErrorMessages()) ~> derivedColumn1",
						"derivedColumn1 split(Is_ErrorRow==false(),",
						"     disjoint: false) ~> split1@(GoodRecords, BadRecords)",
						"split1@GoodRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['Goodrecords_Assert.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> goodrecords",
						"split1@BadRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['Badrecords_Assert.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> badrecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_assertinputcsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_deptassertcsv_Input')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CacheSink_Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_1101_azsqldb",
								"type": "DatasetReference"
							},
							"name": "empdb"
						},
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_1102_azsqldb",
								"type": "DatasetReference"
							},
							"name": "citysource"
						}
					],
					"sinks": [
						{
							"name": "CachedMaxEmpid"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"name": "citycachesink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Max_empid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select Max(empid) as Max_empid From empdb',",
						"     format: 'query') ~> empdb",
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          citycode as string,",
						"          cityname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> citysource",
						"source1 select(mapColumn(",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(EmpKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(emp_idfromkey = CachedMaxEmpid#output().Max_empid +EmpKey,",
						"          Cityname = citycachesink#lookup(City).cityname) ~> derivedColumn1",
						"empdb sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          Max_empid",
						"     )) ~> CachedMaxEmpid",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cachesinkOutput_Load_adlsgen2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpKey,",
						"          emp_idfromkey,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          City,",
						"          Cityname,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"citysource sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['citycode'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          citycode,",
						"          cityname",
						"     )) ~> citycachesink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_1101_azsqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_1102_azsqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CacheSink_Lookup_Loadsqldb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_1101_azsqldb",
								"type": "DatasetReference"
							},
							"name": "empdb"
						},
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_1102_azsqldb",
								"type": "DatasetReference"
							},
							"name": "citysource"
						}
					],
					"sinks": [
						{
							"name": "CachedMaxEmpid"
						},
						{
							"dataset": {
								"referenceName": "ds_1101_azsqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"name": "citycachesink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Max_empid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select Max(empid) as Max_empid From empdb',",
						"     format: 'query') ~> empdb",
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          citycode as string,",
						"          cityname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> citysource",
						"source1 select(mapColumn(",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(EmpKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(emp_idfromkey = CachedMaxEmpid#output().Max_empid +EmpKey,",
						"          Cityname = citycachesink#lookup(City).cityname) ~> derivedColumn1",
						"empdb sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          Max_empid",
						"     )) ~> CachedMaxEmpid",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid = emp_idfromkey,",
						"          empname = EmpName,",
						"          deptid = DeptID,",
						"          Sal = Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City = Cityname,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1",
						"citysource sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['citycode'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          citycode,",
						"          cityname",
						"     )) ~> citycachesink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_1101_azsqldb')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_1102_azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CacheSink_to_Activity_Output')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "CacheSinktoactivityOutput"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(Max_Sal = max(Salary)) ~> aggregate1",
						"aggregate1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          Max_Sal",
						"     )) ~> CacheSinktoactivityOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cast')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cast_emp",
								"type": "DatasetReference"
							},
							"name": "empcast"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "GoodRecords"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "BadRecords"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> empcast",
						"empcast cast(output(",
						"          Salary as integer,",
						"          Bonus as integer,",
						"          DOJ as date 'MM/dd/yyyy',",
						"          Company as string",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 split(!isError(),",
						"     disjoint: false) ~> split1@(GoodRecords, BadRecords)",
						"split1@GoodRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['GoodRecords_Cast_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> GoodRecords",
						"split1@BadRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['BadRecords_Cast_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BadRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cast_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Salesemployees"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Accountemployees"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "RandDemployees"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Technicalemployees"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Marketingemployees"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Otheremployees",
							"description": "Security,Finance etc"
						}
					],
					"transformations": [
						{
							"name": "Conditionalsplit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     dateFormats: ['MM-dd-yyyy'],",
						"     timestampFormats: ['MM-dd-yyyy HH:mm:ss']) ~> emp",
						"emp split(DeptID ==10,",
						"     DeptID==20,",
						"     DeptID==30,",
						"     DeptID==40,",
						"     DeptID==50,",
						"     disjoint: false) ~> Conditionalsplit@(Salesemp, Accountsemp, Marketingemp, Technicalemp, RandDemp, Otheremp)",
						"Conditionalsplit@Salesemp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['salesemployee.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> Salesemployees",
						"Conditionalsplit@Accountsemp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['accountemployees.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Accountemployees",
						"Conditionalsplit@RandDemp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['R&Demployees.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> RandDemployees",
						"Conditionalsplit@Technicalemp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Technicalemployees.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Technicalemployees",
						"Conditionalsplit@Marketingemp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Marketingemployees.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Marketingemployees",
						"Conditionalsplit@Otheremp sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Otheremployees.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Otheremployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlattenRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_flattenrow_inputjson",
								"type": "DatasetReference"
							},
							"name": "employeejson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_outputjson",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Emp_details as (Address as (Country as string, State as string, Zipcode as integer), Contact as (Email as string, Phone as long), Skills as string[], id as short, name as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> employeejson",
						"employeejson foldDown(unroll(Emp_details.Skills),",
						"     mapColumn(",
						"          id = Emp_details.id,",
						"          name = Emp_details.name,",
						"          Skills = Emp_details.Skills,",
						"          Address = Emp_details.Address,",
						"          Contact = Emp_details.Contact",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['FlattenRow_Output.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_flattenrow_inputjson')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputjson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FuzzyJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_fuzzyemp1",
								"type": "DatasetReference"
							},
							"name": "emp1"
						},
						{
							"dataset": {
								"referenceName": "ds_fuzzyemp2",
								"type": "DatasetReference"
							},
							"name": "emp2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FuzzyJoin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          Salary as short,",
						"          Gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp1",
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          sal as short,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp2",
						"emp1, emp2 join(fuzzyCompare(EmpName, name, 67.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: true,",
						"     scoreColumn:'Similarity_level',",
						"     broadcast: 'off')~> FuzzyJoin",
						"FuzzyJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['FuzzyJoin_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_fuzzyemp1')]",
				"[concat(variables('factoryId'), '/datasets/ds_fuzzyemp2')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inline Dataset')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2410",
								"type": "LinkedServiceReference"
							},
							"name": "EmpSrc"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adlsgen2_2510",
								"type": "LinkedServiceReference"
							},
							"name": "InlineSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerID as long,",
						"          CustomerName as string,",
						"          Location as string,",
						"          Salary as long,",
						"          Deptid as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'testinput',",
						"     folderPath: 'Test1111/dir1',",
						"     fileName: 'Customers.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     dateFormats: ['MM/dd/yyyy'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'double',",
						"     booleanFormat: ['True', 'False']) ~> EmpSrc",
						"EmpSrc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output3010container',",
						"     folderPath: 'cust.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Location,",
						"          Salary,",
						"          Deptid",
						"     )) ~> InlineSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2410')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Lookup=LeftOuterJoin",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "LookupOutput"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept lookup(emp@DeptID == dept@DeptID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['LookupOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     dateFormat:'MM/dd/yyyy',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID = emp@DeptID,",
						"          DeptID2 = dept@DeptID,",
						"          DeptName,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> LookupOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "joinsink"
						},
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "aggregatesink"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp aggregate(groupBy(DeptID),",
						"     TotalEmployeesbyDeptID = count(EmpID)) ~> aggregate1",
						"emp, dept join(emp@DeptID == dept@DeptID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['JoinSinkOutput_fromNewBranch.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID = emp@DeptID,",
						"          DeptName,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> joinsink",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['AggregateSinkOutput_fromNewBranch.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DeptID,",
						"          TotalEmployeesbyDeptID",
						"     ),",
						"     partitionBy('hash', 1)) ~> aggregatesink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parametrizedataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dep_param as integer",
						"}",
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(DeptID==$dep_param) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Parametrize_Dept_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azuresqldb1105",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_jsonoutput3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ParseSkills"
						},
						{
							"name": "ParseAddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          Skills as string,",
						"          emp_address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 parse(ParseSkills = Skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> ParseSkills",
						"ParseSkills parse(ParseAddress = emp_address ? (city as string,",
						"          country as string,",
						"          Zipcode as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> ParseAddress",
						"ParseAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ParseSkills_Address_Output.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          Skill1 = ParseSkills.skill1,",
						"          Skill2 = ParseSkills.skill2,",
						"          Skill3 = ParseSkills.skill3,",
						"          City = ParseAddress.city,",
						"          Country = ParseAddress.country,",
						"          Zipcode = ParseAddress.Zipcode",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azuresqldb1105')]",
				"[concat(variables('factoryId'), '/datasets/ds_jsonoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp pivot(groupBy(DeptID),",
						"     pivotBy(Gender),",
						"     Employees = count(EmpID),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivot",
						"pivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Pivot_Outputsink.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rank_DenseRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Rank"
						},
						{
							"name": "DenseRank"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(desc(Salary, true),",
						"     caseInsensitive: true,",
						"     output(Rank as long)) ~> Rank",
						"Rank rank(desc(Salary, true),",
						"     caseInsensitive: true,",
						"     output(DenseRank as long),",
						"     dense: true) ~> DenseRank",
						"DenseRank sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Rank&DenseRank_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company,",
						"          Salary,",
						"          Rank,",
						"          DenseRank",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_input_emp_DriftSchema",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          department as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DriftSchema_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_input_emp_DriftSchema')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stringify')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_jsoninput_1108",
								"type": "DatasetReference"
							},
							"name": "empjsonsrc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_outputjson",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "stringify1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Emp_details as (id as string, name as string, Skills as string[], Address as (State as string, Country as string, Zipcode as string), Contact as (Phone as string, Email as string))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> empjsonsrc",
						"empjsonsrc stringify(AddressStringify = Emp_details.Address ? string,",
						"          ContactStringify = Emp_details.Contact ? string,",
						"     format: 'json') ~> stringify1",
						"stringify1 derive(address = toString(AddressStringify),",
						"          contact = toString(ContactStringify)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['stringify_output.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Emp_details,",
						"          AddressStringify,",
						"          ContactStringify",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_jsoninput_1108')]",
				"[concat(variables('factoryId'), '/datasets/ds_outputjson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp keyGenerate(output(EmpSurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 4L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          EmpSurrogateKey,",
						"          EmpName,",
						"          DeptID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['SurrogateKey_Output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "userdefinedfunction",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "gender_df",
							"type": "DataFlowReference"
						},
						{
							"referenceName": "emp_grade",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Gender_intvalue = toInteger(gender_values_in_integer(Gender)),",
						"          emp_grade = toString(emp_grade(Salary))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['UDF_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/gender_df')]",
				"[concat(variables('factoryId'), '/dataflows/emp_grade')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnPivot_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_unpivot",
								"type": "DatasetReference"
							},
							"name": "POvendor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "UnPivotSink"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PO as short,",
						"          Vendor as string,",
						"          Apple as short,",
						"          Pear as short,",
						"          Orange as short,",
						"          Mango as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> POvendor",
						"POvendor unpivot(output(",
						"          Fruits as string,",
						"          Qty as short",
						"     ),",
						"     ungroupBy(PO,",
						"          Vendor),",
						"     lateral: false,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['UnPivot_1_SinkOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnPivotSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_unpivot')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnPivot_2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "UnpivotSink"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						},
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp pivot(groupBy(DeptID),",
						"     pivotBy(Gender),",
						"     Employees = count(EmpID),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivot",
						"pivot unpivot(output(",
						"          Employees as long,",
						"          Total as long",
						"     ),",
						"     ungroupBy(DeptID),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Unpivot_2_Outputsink.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnpivotSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_marketingempcsv",
								"type": "DatasetReference"
							},
							"name": "Marketingemp"
						},
						{
							"dataset": {
								"referenceName": "ds_accountempcsv",
								"type": "DatasetReference"
							},
							"name": "accountemp"
						},
						{
							"dataset": {
								"referenceName": "ds_salesempcsv",
								"type": "DatasetReference"
							},
							"name": "salesemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "accountmarketingsalesemployees"
						}
					],
					"transformations": [
						{
							"name": "marketingaccountsalesemployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> Marketingemp",
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> accountemp",
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> salesemp",
						"accountemp, Marketingemp, salesemp union(byName: true)~> marketingaccountsalesemployees",
						"marketingaccountsalesemployees sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['Unionoutput(accountmarketingsales_emp).csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> accountmarketingsalesemployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_marketingempcsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_accountempcsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_salesempcsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adlsgen2_2510",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp aggregate(groupBy(DeptID),",
						"     {Total Employee} = count(EmpID)) ~> aggregate1",
						"aggregate1, dept join(aggregate1@DeptID == dept@DeptID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['aggregateresultbydept.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DeptID = dept@DeptID,",
						"          DeptName,",
						"          {Total Employee}",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_flowletuse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_empflowletcsv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet1@(output1)",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DeptID as string,",
						"          DeptName as string",
						"     ),",
						"     partitionFileNames:['flowletoutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flowlet1')]",
				"[concat(variables('factoryId'), '/datasets/ds_empflowletcsv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/derived')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "DerivedSink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Country = upper(Country),",
						"          Grade = iif(Salary>1500,'Grade-A','Grade-B')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['DerivedSink.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company,",
						"          GradeofEmp = Grade",
						"     ),",
						"     partitionBy('hash', 1)) ~> DerivedSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emp_grade')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "employee_grade",
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"emp_grade(short) as string = iif(i1>=1500 && i1<=2500, 'Grade-B', 'Grade-A')"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "existsoutput"
						}
					],
					"transformations": [
						{
							"name": "exists"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept exists(emp@DeptID == dept@DeptID,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists",
						"exists, dept join(emp@DeptID == dept@DeptID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Exists_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID = emp@DeptID,",
						"          DeptName,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> existsoutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "empsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Marketingempsink",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adlsgen2_2510",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> empsource",
						"empsource filter(DeptID==30) ~> filter",
						"filter sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['filter_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> Marketingempsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(id,",
						"          name,",
						"          gender),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 output(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     )) ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/gender_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"gender_values_in_integer(string) as integer = iif(i1=='M',1,2)"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_input_excel_emp",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_input_excel_dept",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adlsgen2_2510",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "Derivedcolumns",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "join"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          City as string,",
						"          DOJ as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     dateFormats: ['MM/dd/yyyy'],",
						"     timestampFormats: ['MM/dd/yyyy HH:mm:ss'],",
						"     preferredIntegralType: 'short',",
						"     preferredFractionalType: 'float',",
						"     booleanFormat: ['True', 'False']) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp derive(DOJ = toDate(DOJ),",
						"          Class = iif(Salary>2000, 'I', 'II')) ~> Derivedcolumns",
						"Derivedcolumns, dept join(emp@DeptID == dept@DeptID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['join_output_deptempsink.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID = emp@DeptID,",
						"          DeptName,",
						"          Salary,",
						"          Class,",
						"          Bonus,",
						"          Gender,",
						"          City,",
						"          DOJ",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_input_excel_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_input_excel_dept')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_2510')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/not_exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						},
						{
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "Notexistsoutput"
						}
					],
					"transformations": [
						{
							"name": "Notexists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"source(output(",
						"          DeptID as short,",
						"          DeptName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> dept",
						"emp, dept exists(emp@DeptID == dept@DeptID,",
						"     negate:true,",
						"     broadcast: 'auto')~> Notexists",
						"Notexists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['NotExists_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> Notexistsoutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pq1_GroupBy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_inputemp_sample",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> ds_inputemp_sample",
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							}
						},
						{
							"name": "ds_inputdept_sample",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> ds_inputdept_sample",
							"dataset": {
								"referenceName": "ds_inputdept_sample",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_inputemp_sample = let AdfDoc = AzureStorage.DataLakeContents(\"https://sspadls2410.dfs.core.windows.net/input/emp_sample.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared ds_inputdept_sample = let AdfDoc = AzureStorage.DataLakeContents(\"https://sspadls2410.dfs.core.windows.net/input/Dept_sample.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"ds_inputemp_sample\",\r\n  #\"Grouped rows\" = Table.Group(Source, {\"DeptID\"}, {{\"TotalEmpbyDept\", each Table.RowCount(_), Int64.Type}}),\r\n  #\"Sorted rows\" = Table.Sort(#\"Grouped rows\", {{\"DeptID\", Order.Descending}}) in #\"Sorted rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputdept_sample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "selectsink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp select(mapColumn(",
						"          NameofEmp = EmpName,",
						"          DepartmentID = DeptID,",
						"          Salary,",
						"          City,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['selectoutput_sink.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          NameofEmp,",
						"          DepartmentID,",
						"          Salary,",
						"          City,",
						"          Country",
						"     ),",
						"     partitionBy('hash', 1)) ~> selectsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput_csv",
								"type": "DatasetReference"
							},
							"name": "sortSinkOutput"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp sort(asc(EmpName, true),",
						"     caseInsensitive: true) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['SortOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary,",
						"          Bonus,",
						"          Gender,",
						"          Country,",
						"          City,",
						"          DOJ,",
						"          Company",
						"     ),",
						"     partitionBy('hash', 1)) ~> sortSinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/window')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_inputemp_sample",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sinkoutput2_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as short,",
						"          EmpName as string,",
						"          DeptID as short,",
						"          Salary as short,",
						"          Bonus as short,",
						"          Gender as string,",
						"          Country as string,",
						"          City as string,",
						"          DOJ as string,",
						"          Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> emp",
						"select1 window(over(DeptID),",
						"     desc(Salary, true),",
						"     AverageSal = avg(Salary),",
						"          Rank = rank(),",
						"          DenseRank = denseRank(),",
						"          NTILE = nTile(3),",
						"          CumeDiist = cumeDist(),",
						"          TotalSal_byDept = sum(Salary),",
						"          Row_Number = rowNumber(),",
						"          Lag = lag(Salary, 1, 'NA'),",
						"          Lead = lead(Salary, 1, 'NA')) ~> window1",
						"emp select(mapColumn(",
						"          EmpID,",
						"          EmpName,",
						"          DeptID,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     partitionFileNames:['WindowOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputemp_sample')]",
				"[concat(variables('factoryId'), '/datasets/ds_sinkoutput2_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Assert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Assert",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsrc": {},
									"Deptsrc": {},
									"goodrecords": {},
									"badrecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Assert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CacheSink_Lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CacheSink_Lookup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdb": {},
									"source1": {},
									"citysource": {},
									"CachedMaxEmpid": {},
									"sink1": {},
									"citycachesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CacheSink_Lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CacheSink_Lookup_Loadsqldb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CacheSink_Lookup_Loadsqldb",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdb": {},
									"source1": {},
									"citysource": {},
									"CachedMaxEmpid": {},
									"sink1": {},
									"citycachesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CacheSink_Lookup_Loadsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CacheSink_to_Activity_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CacheSink_to_Activity_Output",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"CacheSinktoactivityOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CacheSink_to_Activity_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Cast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cast",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empcast": {},
									"GoodRecords": {},
									"BadRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"Salesemployees": {},
									"Accountemployees": {},
									"RandDemployees": {},
									"Technicalemployees": {},
									"Marketingemployees": {},
									"Otheremployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_FlattenRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FlattenRow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeejson": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FlattenRow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_FuzzyJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FuzzyJoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp1": {},
									"emp2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FuzzyJoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_InlineDataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Inline Dataset",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpSrc": {},
									"InlineSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Inline Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Lookup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"LookupOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_NewBranch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NewBranch",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"joinsink": {},
									"aggregatesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/NewBranch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Parametrizedataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parametrizedataflow",
								"type": "DataFlowReference",
								"parameters": {
									"dep_param": "20"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parametrizedataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ParseTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParseTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParseTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Pivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Pivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Pivot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Rank_DenseRank')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rank_DenseRank",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Rank_DenseRank')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SchemaDrift",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SchemaDrift')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Stringify')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Stringify",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empjsonsrc": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Stringify')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SurrogateKey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SurrogateKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_UDF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_UnPivot_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnPivot_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"POvendor": {},
									"UnPivotSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UnPivot_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_UnPivot_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnPivot_2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"UnpivotSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UnPivot_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Union')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Union",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Marketingemp": {},
									"accountemp": {},
									"salesemp": {},
									"accountmarketingsalesemployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Union')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataflow_flowlet_use')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_flowletuse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_flowletuse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_derived')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "derived",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"DerivedSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/derived')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "exists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"existsoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/exists')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsource": {},
									"Marketingempsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Not_Exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "not_exists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"dept": {},
									"Notexistsoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/not_exists')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"selectsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Sort')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sort",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"sortSinkOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sort')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Window')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "window",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow Pipelines"
				},
				"annotations": [
					"Dataflow"
				],
				"lastPublishTime": "2023-11-24T05:40:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/window')]"
			]
		}
	]
}